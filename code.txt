can u add the functionality of a pause/resume button and also a exit button that takes the user back to the main page of the game and stops the current game as well,here are the classes of my game-
GameFrame.java-
import javax.swing.*;
import java.awt.*;


public class GameFrame extends JFrame {
     GamePanel panel ;

    GameFrame(){
       panel = new GamePanel();
       this.add(panel);
       this.setTitle("PONG GAME");
       this.setResizable(false);
       this.setBackground(Color.black);
       this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.pack();
       this.setVisible(true);
       this.setLocationRelativeTo(null);

    }
}
...
GamePanel.java-
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Random;

public class GamePanel extends JPanel implements Runnable {
    AI ai;
    static final int GAME_WIDTH = 1000;
    static final int GAME_HEIGHT = (int) (GAME_WIDTH * (0.5555));
    static final Dimension SCREEN_SIZE = new Dimension(GAME_WIDTH, GAME_HEIGHT);
    static final int BALL_DIAMETER = 20;
    static final int PADDLE_WIDTH = 25;
    static final int PADDLE_HEIGHT = 100;
    Thread gameThread;
    Image image;
    Graphics graphics;
    Random random;
    Paddle paddle1;
    Paddle paddle2;
    Ball ball;
    Score score;

    GamePanel() {
        ai = new AI(GAME_WIDTH - PADDLE_WIDTH, (GAME_HEIGHT / 2) - (PADDLE_HEIGHT / 2), PADDLE_WIDTH, PADDLE_HEIGHT, 2);
        newPaddles();
        newBall();
        score = new Score(GAME_WIDTH, GAME_HEIGHT);
        this.setFocusable(true);
        this.addKeyListener(new AL());
        this.setPreferredSize(SCREEN_SIZE);

        gameThread = new Thread(this);
        gameThread.start();
    }

    public void newBall() {
        random = new Random();
        ball = new Ball((GAME_WIDTH / 2) - (BALL_DIAMETER / 2), random.nextInt(GAME_HEIGHT - BALL_DIAMETER),
                BALL_DIAMETER, BALL_DIAMETER);
    }

    public void newPaddles() {
        paddle1 = new Paddle(0, (GAME_HEIGHT / 2) - (PADDLE_HEIGHT / 2), PADDLE_WIDTH, PADDLE_HEIGHT, 1);
        paddle2 = ai; // Assigning AI-controlled paddle
    }

    public void paint(Graphics g) {
        image = createImage(getWidth(), getHeight());
        graphics = image.getGraphics();
        draw(graphics);
        g.drawImage(image, 0, 0, this);
    }

    public void draw(Graphics g) {
        paddle1.draw(g);
        paddle2.draw(g);
        ball.draw(g);
        score.draw(g);
        Toolkit.getDefaultToolkit().sync();
    }

    public void move() {
        paddle1.move();
        ai.makeMove(ball); // Pass the y-coordinate of the ball to AI's makeMove method
        ball.move();
    }

    public void checkCollision() {
        if (ball.y <= 0 || ball.y >= GAME_HEIGHT - BALL_DIAMETER) {
            ball.setYDirection(-ball.yVelocity);
        }

        if (ball.intersects(paddle1) || ball.intersects(ai)) {
            ball.setXDirection(-ball.xVelocity);

            // Increase velocity slightly when intersecting with a paddle
            final float VELOCITY_INCREMENT = 0.6f; // Adjust this value as needed

            if (ball.xVelocity > 0) {
                ball.xVelocity += VELOCITY_INCREMENT; // Increase velocity if ball is moving right
            } else {
                ball.xVelocity--; // Decrease velocity if ball is moving left
            }

            // Adjust y-velocity (optional)
            if (ball.yVelocity > 0) {
                ball.yVelocity += VELOCITY_INCREMENT; // Increase y-velocity if ball is moving downward
            } else {
                ball.yVelocity--; // Decrease y-velocity if ball is moving upward
            }
        }

        if (paddle1.y <= 0)
            paddle1.y = 0;
        if (paddle1.y >= GAME_HEIGHT - PADDLE_HEIGHT)
            paddle1.y = GAME_HEIGHT - PADDLE_HEIGHT;
        if (ai.y <= 0)
            ai.y = 0;
        if (ai.y >= GAME_HEIGHT - PADDLE_HEIGHT)
            ai.y = GAME_HEIGHT - PADDLE_HEIGHT;

        if (ball.x <= 0) {
            score.player2++;
            newPaddles();
            newBall();
            System.out.println("Player 2: " + score.player2);
        }
        if (ball.x >= GAME_WIDTH - BALL_DIAMETER) {
            score.player1++;
            newPaddles();
            newBall();
            System.out.println("Player 1: " + score.player1);
        }
    }

    public void run() {
        long lastTime = System.nanoTime();
        double amountOfTicks = 60.0;
        double ns = 1000000000 / amountOfTicks;
        double delta = 0;
        while (true) {
            long now = System.nanoTime();
            delta += (now - lastTime) / ns;
            lastTime = now;
            if (delta >= 1) {
                move();
                ai.makeMove(ball); // Call makeMove() for AI paddle
                checkCollision();
                repaint();
                delta--;
            }
        }
    }

    public class AL extends KeyAdapter {
        public void keyPressed(KeyEvent e) {
            paddle1.keyPressed(e);
        }

        public void keyReleased(KeyEvent e) {
            paddle1.keyReleased(e);
        }
    }
}
...
Paddle.java-
import java.awt.*;
import java.awt.event.KeyEvent;

public class Paddle extends Rectangle {
    private int id;
    private int yVelocity;
    private int speed = 15;

    public Paddle(int x, int y, int width, int height, int id) {
        super(x, y, width, height);
        this.id = id;
    }

    public void keyPressed(KeyEvent e) {
        switch(id) {
            case 1:
                if (e.getKeyCode() == KeyEvent.VK_W) {
                    setYVelocity(-speed);
                } else if (e.getKeyCode() == KeyEvent.VK_S) {
                    setYVelocity(speed);
                }
                break;
            case 2:
                if (e.getKeyCode() == KeyEvent.VK_UP) {
                    setYVelocity(-speed);
                } else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    setYVelocity(speed);
                }
                break;
        }
    }

    public void keyReleased(KeyEvent e) {
        switch(id) {
            case 1:
                if (e.getKeyCode() == KeyEvent.VK_W || e.getKeyCode() == KeyEvent.VK_S) {
                    setYVelocity(0);
                }
                break;
            case 2:
                if (e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_DOWN) {
                    setYVelocity(0);
                }
                break;
        }
    }

    public void setYVelocity(int yVelocity) {
        this.yVelocity = yVelocity;
    }

    public void move() {
        y = y + yVelocity;
    }

    public void draw(Graphics g) {
        if (id == 1) {
            g.setColor(Color.blue);
        } else {
            g.setColor(Color.red);
        }
        g.fillRect(x, y, width, height);
    }
}
...
Score.java-
import java.awt.*;

public class Score extends Rectangle{

    static int GAME_WIDTH;
    static int GAME_HEIGHT;
    int player1;
    int player2;

    Score(int GAME_WIDTH, int GAME_HEIGHT){
        Score.GAME_WIDTH = GAME_WIDTH;
        Score.GAME_HEIGHT = GAME_HEIGHT;
    }
    public void draw(Graphics g) {
        g.setColor(Color.white);
        g.setFont(new Font("Consolas",Font.PLAIN,60));

        g.drawLine(GAME_WIDTH/2, 0, GAME_WIDTH/2, GAME_HEIGHT);

        g.drawString(String.valueOf(player1/10)+String.valueOf(player1%10), (GAME_WIDTH/2)-85, 50);
        g.drawString(String.valueOf(player2/10)+String.valueOf(player2%10), (GAME_WIDTH/2)+20, 50);
    }
}
...
Ball.java-
import java.awt.*;
import java.util.*;

public class Ball extends Rectangle {
    Random random;
    int xVelocity;
    int yVelocity;
    int initialSpeed = 2;

    Ball(int x, int y, int width, int height) {
        super(x, y, width, height);
        random = new Random();
        int randomXDirection = random.nextInt(2);
        if (randomXDirection == 0)
            randomXDirection--;
        setXDirection(randomXDirection * initialSpeed);

        int randomYDirection = random.nextInt(2);
        if (randomYDirection == 0)
            randomYDirection--;
        setYDirection(randomYDirection * initialSpeed);

    }

    public void setXDirection(int randomXDirection) {
        xVelocity = randomXDirection;
    }

    public void setYDirection(int randomYDirection) {
        yVelocity = randomYDirection;
    }

    public void move() {
        x += xVelocity;
        y += yVelocity;
    }

    public void draw(Graphics g) {
        g.setColor(Color.white);
        g.fillOval(x, y, height, width);
    }
}
...
AI.java-
import java.util.Random;

class AI extends Paddle {
    private int speed = 5;
    private Random random;

    public AI(int x, int y, int width, int height, int id) {
        super(x, y, width, height, id);
        random = new Random();
    }

    public void makeMove(Ball ball) {
        // Calculate the time it will take for the ball to reach the AI paddle's x
        // position
        double timeToReachX = (x - ball.x) / (double) ball.xVelocity;

        // Predict the future y position of the ball based on its current trajectory
        int futureBallY = (int) (ball.y + timeToReachX * ball.yVelocity);

        // Adjust the predicted y position to ensure it stays within the game bounds
        if (futureBallY < 0) {
            futureBallY = -futureBallY;
        } else if (futureBallY > GamePanel.GAME_HEIGHT - GamePanel.BALL_DIAMETER) {
            futureBallY = 2 * (GamePanel.GAME_HEIGHT - GamePanel.BALL_DIAMETER) - futureBallY;
        }

        // Move the paddle towards the predicted position
        if (y + height / 2 < futureBallY) {
            setYVelocity(speed);
        } else if (y + height / 2 > futureBallY) {
            setYVelocity(-speed);
        } else {
            setYVelocity(0);
        }

        // Move the paddle based on the calculated velocity
        move();

        // Ensure that the paddle stays within the game bounds
        if (y < 0) {
            y = 0;
        } else if (y > getMaxPosition()) {
            y = getMaxPosition();
        }
    }

    protected int getMaxPosition() {
        return GamePanel.GAME_HEIGHT - height;
    }
}





dbms part-


im building a pong game using java and i want to intergarte the database part to this game using JDBC and these are the requirements that i want to be done ,i have already built the main page ,leaderboard page ,can u build me the login/signup page that gets shown when user presses on the play game button and he/she has to register for the game first and later wll be able to play
When the user clicks the button on PongMainPage to play, he is first asked to sign up/log in with username and password. Then when the human player wins or loses against the AI, update the database record by adding 1 to the player username's wins or losses attribute
